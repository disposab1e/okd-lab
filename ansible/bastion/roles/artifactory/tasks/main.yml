---
- name: Create Directories
  file:
    path: '{{ item.dir }}'
    state: directory
    owner: '1030'
    group: '1030'
  with_items:
    - { dir: '/var/opt/artifactory/postgres' }
    - { dir: '/var/opt/artifactory/var' }
    - { dir: '/var/opt/artifactory/var/etc/security/keys/trusted' }

- name: Publish System Files
  copy:
    src: "var/"
    dest: /var/opt/artifactory/var
    owner: '1030'
    group: '1030'

- name: ACL for datastorage 
  command: setfacl -m u:1030:-wx /var/opt/artifactory/var

- name: Copy ca.crt for ldaps
  copy:
    src: /etc/ca.crt
    dest: /var/opt/artifactory/var/etc/security/keys/trusted/server.crt
    remote_src: yes
    owner: '1030'
    group: '1030'

- name: Copy services
  template:
    src: '{{ item }}.j2'
    dest: /etc/systemd/system/{{ item }}
  with_items:
    - container-artifactory-artifactory.service
    - container-artifactory-postgres.service


- name: Just force systemd to reread configs
  systemd:
    daemon_reload: yes

- name: Start container-artifactory-postgres.service
  systemd:
    name: container-artifactory-postgres.service
    state: started
    enabled: yes

- name: Pause 30 seconds
  pause:
    seconds: '30'

- name: Copy artifactory.config.import.yml
  template:
    src:  artifactory.config.import.yml.j2
    dest: /var/opt/artifactory/var/etc/artifactory.config.import.yml
    owner: '1030'
    group: '1030'

- name: Copy system.yaml
  template:
    src:  system.yaml.j2
    dest: /var/opt/artifactory/var/etc/system.yaml
    owner: '1030'
    group: '1030'

- name: Start container-artifactory-artifactory.service
  systemd:
    name: container-artifactory-artifactory.service
    state: started
    enabled: yes

- name: Pause 60 seconds
  pause:
    seconds: '60'

- name: "Wait for Artifactory to be ready"
  uri:
    url: "{{ okd_lab_artifactory_api_url }}/system/ping"
    follow_redirects: none
    method: GET
    validate_certs: false
  register: _result
  until: _result.status == 200
  retries: 720 
  delay: 5 

- name: Create and get admin API Key
  uri: 
    url: '{{ okd_lab_artifactory_api_url }}/security/apiKey'
    method: POST
    user: '{{ okd_lab_artifactory_local_admin_username }}'
    password: '{{ okd_lab_artifactory_local_admin_password }}'
    return_content: yes
    force_basic_auth: yes
    status_code: '201'
    validate_certs: false
  register: apikey_response
 
- set_fact: 
    apikey: '{{ apikey_response.json.apiKey }}'

- name: Write admin-api token to file
  copy:
    content: "{{ apikey }}"
    dest: "/tmp/artifactory-admin-api"

- name: Fetch admin-api token
  fetch:
    src: "/tmp/artifactory-admin-api"
    dest: "~/github/okd-lab/.secrets/artifactory-admin-api"
    flat: yes

- name: Apply Custom Configuration
  uri: 
    url: '{{ okd_lab_artifactory_api_url }}/system/configuration'
    method: PATCH
    user: admin
    password: "{{ lookup('file','{{ playbook_dir }}/../../.secrets/artifactory-admin-api') }}"
    return_content: yes
    force_basic_auth: yes
    headers:
      Content-Type: "application/yaml"
    body: "{{ lookup('template','configuration.yml.j2') }}"
    status_code: '200'
    validate_certs: false

- name: Create Access Token
  command: 
    curl --insecure -u admin:{{ lookup('file','{{ playbook_dir }}/../../.secrets/artifactory-admin-api') }} \
      -XPOST '{{ okd_lab_artifactory_api_url }}/security/token' \
      -d "expires_in=0" \
      -d "refreshable=false" \
      -d "username=admin" \
      -d "scope=member-of-groups:admin"
  register: token_response

- name: Write admin token to file
  copy:
    content: "{{ token_response.stdout | from_json | json_query('access_token') }}"
    dest: "/tmp/artifactory-admin"

- name: Fetch token
  fetch:
    src: "/tmp/artifactory-admin"
    dest: "~/github/okd-lab/.secrets/artifactory-admin"
    flat: yes

- name: Pause 20 seconds
  pause:
    seconds: '20'

